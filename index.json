[{"categories":["Golang"],"content":"Go5：数组与多维数组 ","date":"2023-03-21","objectID":"/post/5ded7b78/:0:0","tags":["Golang","编程"],"title":"Go入门日记-数组","uri":"/post/5ded7b78/"},{"categories":["Golang"],"content":"一 、数组 1.1 数组的声明 数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型 var arr1 [6]int //定义长度为6的整型数组，未初始化默认为0 //输出 [0 0 0 0 0 0] var arr2 = [...]int{1,2,3,4,5} //自动推导长度并初始化 //输出 [1 2 3 4 5] arr3 := [6]int{1,2,3,4,5,6} //定义并初始化 //输出 [1 2 3 4 5 6] arr3 := [...]int{2,3,4} //自动推导长度并初始化 //输出 [2 3 4] arr4 := [6]int{1,2} //指定固定长度，前几位被初始化，其他使用零值 // [1 2 0 0 0 0] arr5 := [6]int{1:9, 5:18} //将索引为 1 和 5 的元素初始化 //输出 [0 9 0 0 0 18] 1.2 数组常见操作 arr := [6]int{1,2,3,4,5,6} //输出所有元素 fmt.Println(arr) fmt.Println(arr[:]) //输出 [1 2 3 4 5 6] //输出前五个元素 fmt.Println(arr[:5]) //输出 [1 2 3 4 5] //输出从第5个开始（不包含第5个） fmt.Println(arr[5:]) //输出 [6] //数组的长度 fmt.Println(len(arr)) //输出 6 1.3 数组的遍历 arr := [3]int{1,2,3} for i := 0; i \u003c len(arr); i++ { fmt.Println(arr[i]) } //输出 1 2 3 arr := [3]int{1,2,3} for key, value := range arr { fmt.Println(key, value) } //输出 0 1 1 2 2 3 1.4 多维数组 //创建多维数组 var arr[2][2]int arr1 := [][]int{} //多维数组仅第一维度允许使用\"...\" arr2 := [...][2]int{ {1,2}, {3,4}, } 1.5 数组使用注意事项 数组创建完长度就固定，不可以再追加元素； 长度是数组类型的一部分，因此[3]int与[4]int是不同的类型； 数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该函数的副本，而不是他的指针。 ","date":"2023-03-21","objectID":"/post/5ded7b78/:0:1","tags":["Golang","编程"],"title":"Go入门日记-数组","uri":"/post/5ded7b78/"},{"categories":["Golang"],"content":"Go4：字符与字符串 ","date":"2023-03-15","objectID":"/post/ad0f0f0b/:0:0","tags":["Golang","编程"],"title":"Go入门日记-字符串","uri":"/post/ad0f0f0b/"},{"categories":["Golang"],"content":"一、字符 //在golang中没有专门的字符类型变量 var c1 byte = 'a' fmt.Println(\"c1=\", c1) //字符对应码大于255的字符可以使用int来保存 var c2 int = '成' fmt.Printf(\"c2=%c\\n\", c2) ","date":"2023-03-15","objectID":"/post/ad0f0f0b/:0:1","tags":["Golang","编程"],"title":"Go入门日记-字符串","uri":"/post/ad0f0f0b/"},{"categories":["Golang"],"content":"二、字符串 Tips：Go与传统的字符串不同，Go字符串是一串固定长度的字符连接起来的字符序列，字符串在内容初始化后不能被修改，都是采用UTF-8字符集编码。 var str1 string str1 = \"hello\" str2 := \"beijing\" //字符串不可直接改变 //str1[0]='c'会报错 fmt.Printf(\"%c\\n\", str1[1]) //输出 e fmt.Println(len(str2)) //输出 7 fmt.Println(str1 + str2) //输出 hellobeijing 修改字符串的间接方式： 1、通过两次转换来修改字符串 str := \"successful\" //转换成byte数组类型 strTemp := []byte(str) fmt.Println(\"strTemp=\", strTemp) //输出 //strTemp= [115 117 99 99 101 115 115 102 117 108] //修改数组的的值 strTemp[0] = 'c' //将数组转换成字符串 strResult := string(strTemp) fmt.Println(\"strResult=\", strResult) 2、使用切片来完成 str3 := \"liu\" str3 = \"c\" + str3[1:] fmt.Println(str3) //输出：ciu ","date":"2023-03-15","objectID":"/post/ad0f0f0b/:0:2","tags":["Golang","编程"],"title":"Go入门日记-字符串","uri":"/post/ad0f0f0b/"},{"categories":["Golang"],"content":"三、字符串操作 3.1 len()、string()函数 str4 := \"hello\" str5 := \"北京\" //在go语言中中文以utf-8格式保存，每个中文占据三个字节 fmt.Println(len(str4)) //输出 5 fmt.Println(len(str5)) //输出 6 //使用特定函数可以输出真正的字符串长度 fmt.Println(utf8.RuneCountInString(str5)) //输出 2 使用len()遍历字符串 str := \"你好\" for i,ch := range str { fmt.Println(i,ch) } //输出 0 20320 3 22909 string()函数 num := 108 fmt.Printf(\"%T \\n\", string(num)) //输出 string fmt.Printf(\"%s \\n\", string(num)) //输出 l 3.2 字符串连接 str1 = \"hello\" str2 := \"beijing\" fmt.Println(str1 + str2) //用+号来连接字符串不高效 //我们使用StringBuilder来高效字符串连接 //创建字节缓冲 var stringBuilder strings.Builder //把字符串写入缓冲 stringBuilder.WriteString(str1) stringBuilder.WriteString(str2) //将缓冲以字符串形式输出 fmt.Println(stringBuilder.String()) ","date":"2023-03-15","objectID":"/post/ad0f0f0b/:0:3","tags":["Golang","编程"],"title":"Go入门日记-字符串","uri":"/post/ad0f0f0b/"},{"categories":["Golang"],"content":"四、strings包相关函数 //查找s在字符串str中的索引 //Index(str, s string) int str := \"hello beijing\" s := \"e\" fmt.Println(strings.Index(str, s)) //输出 1 //判断str是否包含s //Contains(str, s string) bool fmt.Println(strings.Contains(str, s)) //输出 true //使用字符串str连接s的各个字符串 //Join(s []string, str string) string str := \"\u003c--\u003e\" s := []string{\"O\", \"O\", \"O\"} fmt.Println(strings.Join(s, str)) //输出 O\u003c--\u003eO\u003c--\u003eO //替换字符串str中old字符串为new字符串，n表示替换的次数，小于0全部替换 //Replace(str,old,new string,n int) string str := \"hello\" old := \"e\" new := \"o\" fmt.Println(strings.Replace(str, old, new, 1)) //输出 hollo //字符串str按照s分割，返回切片 //Split(str,s string)[]string str := \"php\" s := \"h\" fmt.Println(strings.Split(str, s)) //输出 [p p] // 去除头部、尾部指定的字符串 //Trim(s string, cutset string) string str := \"linux\" s := \"l\" fmt.Println(strings.Trim(str, s)) //输出 inux // 去除空格，返回切片 //Fields(s string) []string s := \"ha ha\" fmt.Println(strings.Fields(s)) //输出 [ha ha] ","date":"2023-03-15","objectID":"/post/ad0f0f0b/:0:4","tags":["Golang","编程"],"title":"Go入门日记-字符串","uri":"/post/ad0f0f0b/"},{"categories":["Golang"],"content":"五、strconv包的字符串转换 //整型转字符串 num := 100 str := strconv.Itoa(num) fmt.Printf(\"type: %T value: %#v\\n\", str, str) //输出 type: string value: \"100\" //字符串转整型(字符串中如果夹杂这非数字的字符则可能转换失败) str1 := \"110\" str2 := \"s100\" num1, err := strconv.Atoi(str1) if err != nil { fmt.Printf(\"%v 转换失败！\", str1) } else { fmt.Printf(\"type:%T value:%#v\\n\", num1, num1) } num2, err := strconv.Atoi(str2) if err != nil { fmt.Printf(\"%v 转换失败！\", str2) } else { fmt.Printf(\"type:%T value:%#v\\n\", num2, num2) } //输出 type:int value:110 s100 转换失败！ //Parse 系列函数 //ParseBool字符串转为布尔型 //只能接受 1、0、t、f、T、F、true、false、True、False、TRUE、FALSE其他都返回错误 str1 := \"t\" boo1, err := strconv.ParseBool(str1) if err != nil { fmt.Printf(\"str1: %v\\n\", err) } else { fmt.Println(boo1) } //输出 true //ParseInt返回字符串表示的整数值(包括正负号) 参数1: s string 数字的字符串形式 参数2: base int 取值(2-36) Tips: 如果base为0，根据字符串前置判断，“0x”是16进制，“0”是8进制，否则是10进制 参数3: bitSize int 指定结果必须能无溢出赋值的整数类型，0、8、16、32、64 分别代表 int、int8、int16、int32、int64,限制转化生成int类型的位数,但是返回结果都是int64 可参考链接: https://studygolang.com/topics/12335 str := \"-11\" num, err := strconv.ParseInt(str, 10, 0) if err != nil { fmt.Println(err) } else { fmt.Println(num) } //输出 -11 //ParseUint函数的功能类似于ParseInt函数,只适用于无符号整数 //不再举例 //ParseFloat 函数用于将一个表示浮点数的字符串转换为 float 类型 //参数说明： //如果 s 合乎语法规则，函数会返回最为接近 s 表示值的一个浮点数（使用 IEEE754 规范舍入）。 //bitSize 指定了返回值的类型，32 表示 float32，64 表示 float64； //返回值 err 是 *NumErr 类型的，如果语法有误 err.Error=ErrSyntax， //如果返回值超出表示范围，返回值 f 为 ±Inf，err.Error= ErrRange。 //Format 系列函数 //FormatBool函数可以一个bool类型的值转换为对应的字符串类型 num := true str := strconv.FormatBool(num) fmt.Printf(\"type:%T,value:%v\\n \", str, str) //输出 type:string,value:true //FormatInt函数将整型数据转成指定类型字符串 //Tips:参数 i 必须是 int64 类型 var num int64 = 16 str := strconv.FormatInt(num, 16) fmt.Printf(\"type:%T,value:%v\\n \", str, str) //输出 type:string,value:10 //FormatUint函数与FormatInt函数的功能类似，但是参数 i 必须是无符号的 uint64 类型 //不再举例 //FormatFloat函数用于将浮点数转换为字符串类型 参数1: bitSize 参数f的来源类型（32表示float32、64表示float64）会据此进行舍入 参数2: fmt 表示格式，可以设置为“f”表示 -ddd.dddd、“b”表示 -ddddp±ddd，指数为二进制、 “e”表示 -d.dddde±dd 十进制指数、“E”表示 -d.ddddE±dd 十进制指数、“g”表示指数很大时用“e”格式， 否则“f”格式、“G”表示指数很大时用“E”格式，否则“f”格式。 参数3: prec 控制精度（排除指数部分）：当参数 fmt 为“f”、“e”、“E”时，它表示小数点后的数字个数 当参数 fmt 为“g”、“G”时，它控制总的数字个数。 如果 prec 为 -1，则代表使用最少数量的、但又必需的数字来表示 f。 var num float64 = 3.1415926 str := strconv.FormatFloat(num, 'E', -1, 64) fmt.Printf(\"type:%T,value:%v\\n \", str, str) //输出 type:string,value:3.1415926E+00 //Append 系列函数 // 声明一个slice b10 := []byte(\"int (base 10):\") // 将转换为10进制的string，追加到slice中 b10 = strconv.AppendInt(b10, -42, 10) fmt.Println(string(b10)) b16 := []byte(\"int (base 16):\") b16 = strconv.AppendInt(b16, -42, 16) fmt.Println(string(b16)) //输出 int (base 10):-42 int (base 16):-2a ","date":"2023-03-15","objectID":"/post/ad0f0f0b/:0:5","tags":["Golang","编程"],"title":"Go入门日记-字符串","uri":"/post/ad0f0f0b/"},{"categories":["Golang"],"content":"Go3：流程控制 ","date":"2023-03-15","objectID":"/post/fd173a46/:0:0","tags":["Golang","编程"],"title":"Go入门日记-流程控制","uri":"/post/fd173a46/"},{"categories":["Golang"],"content":"一、条件语句 1.1 if判断语句： if i == 3{ //如果i等于3输出true fmt.Println(\"true\") } //将初始化条件与判断语句放在一起 if i := 3;i == 3{ //如果i等于3输出true fmt.Println(\"true\") } 1.2 分支语句 //Go语言中分支语句中默认书写了break语句 num := 2 switch num { case 1: fmt.Println(\"111\") case 2: fmt.Println(\"222\") fallthrough //fallthrough 不跳出switch case 3: fmt.Println(\"333\") default: fmt.Println(\"默认\") } //输出： 222 333 ","date":"2023-03-15","objectID":"/post/fd173a46/:0:1","tags":["Golang","编程"],"title":"Go入门日记-流程控制","uri":"/post/fd173a46/"},{"categories":["Golang"],"content":"二、循环语句 2.1 for循环 //传统for循环 for i := 0; i \u003c 10; i++ { fmt.Println(i) } //for循环简化 var i int for ; ; i++ { if i \u003e 10 { break } } //类似while循环 for i \u003c 10 { i++ } //死循环 for{ } //for range 遍历数组等 for k, v := range []int{1, 2, 3, 4} { fmt.Printf(\"key:%d value:%d\\n\", k, v) } //输出： key:0 value:1 key:1 value:2 key:2 value:3 key:3 value:4 2.2 跳出循环 常用的跳出循环关键字： break用于函数内跳出当前for、switch、select语句的执行 continue用于跳出for循环的本次迭代。 goto可以退出多层循环 goto 标签 标签： ","date":"2023-03-15","objectID":"/post/fd173a46/:0:2","tags":["Golang","编程"],"title":"Go入门日记-流程控制","uri":"/post/fd173a46/"},{"categories":["Golang"],"content":"Go2：数据类型初识 ","date":"2023-03-15","objectID":"/post/71c0dfce/:0:0","tags":["Golang","编程"],"title":"Go入门日记-数据类型","uri":"/post/71c0dfce/"},{"categories":["Golang"],"content":"一、数据类型分类 Go 语言按类别有以下几种数据类型：布尔型、数字型、字符串型、派生型 整型 int8、uint等 数字型 浮点型 float32、float64等 数字型 复数 数字型 布尔型 bool 布尔型 字符串 string 字符串型 数组 派生型 结构体 struct 派生型 引用类型：即保存的是对程序中一个变量的或状态的间接引用，对其修改将影响所有该引用的拷贝 指针 * 切片 slice 字典 map 函数 func 管道 chan 接口 interface tip：Go语言没有字符型，可以使用byte来保存单个字母 ","date":"2023-03-15","objectID":"/post/71c0dfce/:0:1","tags":["Golang","编程"],"title":"Go入门日记-数据类型","uri":"/post/71c0dfce/"},{"categories":["Golang"],"content":"二 、零值机制 Go变量初始化会自带默认值，不像其他语言为空，下面列出各种数据类型对应的0值： int 0 int8 0 int32 0 int64 0 uint 0x0 rune 0 //rune的实际类型是 int32 byte 0x0 // byte的实际类型是 uint8 float32 0 //长度为 4 byte float64 0 //长度为 8 byte bool false string \"\" ","date":"2023-03-15","objectID":"/post/71c0dfce/:0:2","tags":["Golang","编程"],"title":"Go入门日记-数据类型","uri":"/post/71c0dfce/"},{"categories":["Golang"],"content":"Go1：语言标识符与变量 ","date":"2023-03-14","objectID":"/post/1025c530/:0:0","tags":["Golang","编程"],"title":"Go入门日记-标识符与变量","uri":"/post/1025c530/"},{"categories":["Golang"],"content":"1.1关键字 目前Go语言有25个关键字 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var ","date":"2023-03-14","objectID":"/post/1025c530/:0:1","tags":["Golang","编程"],"title":"Go入门日记-标识符与变量","uri":"/post/1025c530/"},{"categories":["Golang"],"content":"1.2保留字 内建常量： true false iota nil 内建类型： int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex128 complex64 bool： byte rune string error 内建函数： make delete complex panic append copy close len cap real imag new recover ","date":"2023-03-14","objectID":"/post/1025c530/:0:2","tags":["Golang","编程"],"title":"Go入门日记-标识符与变量","uri":"/post/1025c530/"},{"categories":["Golang"],"content":"二、变量 2.1变量声明 var a int //初始化变量默认为0 var b = 1 //声明并赋值，自动推导变量类型 c := 2 //初始化，自动推导类型(只能在函数内部使用，var定义全局变量) //Go语言中有定义未使用的变量编译会报错 //大小写变量为不同变量 2.2多变量声明 var c,d int var c1,d1 int = 1,2 var c1,d1 = 1,2 c,d := 1,2 var( e int f byte ) 2.3变量值互换 在Go语言中两个变量互换的操作十分简单 var ( //定义初始化变量 m int = 1 n int = 2 temp int = 6 ) m,n = n,m //将m与n的变量值互换 fmt.Println(m, n) //2 1 2.4_丢弃变量 //_丢弃变量任何赋予它的值都会被丢弃，该变量不占用命名空间 _,d := 1,2 //此时d的值为2，1被丢弃掉 ","date":"2023-03-14","objectID":"/post/1025c530/:1:0","tags":["Golang","编程"],"title":"Go入门日记-标识符与变量","uri":"/post/1025c530/"},{"categories":null,"content":" 关于我 生活明朗，万物向上 你好，很高兴认识你👋 我叫浔若 是一名 在校大学生 追求 源于 热爱而去感受 学习 生活 程序 体验 技能开启创造力 Vue React Docker Photoshop Node Webpack Pinia Python Vite Flutter Java CSS3 JS HTML Git Apifox ... 数据访问统计 统计信息来自51la网站统计 性格倡导者 INFJ-T 座右铭每天，进步一点点。 ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":" 添加友链，评论格式如下： - nickname: \u003cyour nickname\u003e avatar: \u003cyour avatar\u003e url: \u003cyour site link\u003e description: \u003cdescription of your site\u003e ","date":"0001-01-01","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"}]