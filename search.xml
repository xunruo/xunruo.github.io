<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go入门日记-字符串</title>
      <link href="/posts/ad0f0f0b.html"/>
      <url>/posts/ad0f0f0b.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、字符"><a href="#一、字符" class="headerlink" title="一、字符"></a>一、字符</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在golang中没有专门的字符类型变量</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;c1=&quot;</span>, c1)</span><br><span class="line"><span class="comment">//字符对应码大于255的字符可以使用int来保存</span></span><br><span class="line"><span class="keyword">var</span> c2 <span class="type">int</span> = <span class="string">&#x27;成&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2=%c\n&quot;</span>, c2)</span><br></pre></td></tr></table></figure><h3 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h3><p><strong>Tips</strong>：Go与传统的字符串不同，Go字符串是一串固定长度的字符连接起来的字符序列，字符串在内容初始化后不能被<strong>修改</strong>，都是采用UTF-8字符集编码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 <span class="type">string</span></span><br><span class="line">str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str2 := <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="comment">//字符串不可直接改变</span></span><br><span class="line"><span class="comment">//str1[0]=&#x27;c&#x27;会报错</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, str1[<span class="number">1</span>])</span><br><span class="line"><span class="comment">//输出 e</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str2))</span><br><span class="line"><span class="comment">//输出 7</span></span><br><span class="line">fmt.Println(str1 + str2)</span><br><span class="line"><span class="comment">//输出 hellobeijing</span></span><br></pre></td></tr></table></figure><p>修改字符串的间接方式：</p><p>1、通过两次转换来修改字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;successful&quot;</span></span><br><span class="line"><span class="comment">//转换成byte数组类型</span></span><br><span class="line">strTemp := []<span class="type">byte</span>(str)</span><br><span class="line">fmt.Println(<span class="string">&quot;strTemp=&quot;</span>, strTemp)</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//strTemp= [115 117 99 99 101 115 115 102 117 108]</span></span><br><span class="line"><span class="comment">//修改数组的的值</span></span><br><span class="line">strTemp[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="comment">//将数组转换成字符串</span></span><br><span class="line">strResult := <span class="type">string</span>(strTemp)</span><br><span class="line">fmt.Println(<span class="string">&quot;strResult=&quot;</span>, strResult)</span><br></pre></td></tr></table></figure><p>2、使用切片来完成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str3 := <span class="string">&quot;liu&quot;</span></span><br><span class="line">str3 = <span class="string">&quot;c&quot;</span> + str3[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(str3)</span><br><span class="line"><span class="comment">//输出：ciu</span></span><br></pre></td></tr></table></figure><h3 id="三、字符串操作"><a href="#三、字符串操作" class="headerlink" title="三、字符串操作"></a>三、字符串操作</h3><h4 id="3-1-len-、string-函数"><a href="#3-1-len-、string-函数" class="headerlink" title="3.1 len()、string()函数"></a>3.1 len()、string()函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str4 := <span class="string">&quot;hello&quot;</span></span><br><span class="line">str5 := <span class="string">&quot;北京&quot;</span></span><br><span class="line"><span class="comment">//在go语言中中文以utf-8格式保存，每个中文占据三个字节</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str4))</span><br><span class="line"><span class="comment">//输出 5</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str5))</span><br><span class="line"><span class="comment">//输出 6</span></span><br><span class="line"><span class="comment">//使用特定函数可以输出真正的字符串长度</span></span><br><span class="line">fmt.Println(utf8.RuneCountInString(str5))</span><br><span class="line"><span class="comment">//输出 2</span></span><br></pre></td></tr></table></figure><p>使用len()遍历字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="keyword">for</span> i,ch := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Println(i,ch)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">0</span> <span class="number">20320</span></span><br><span class="line"><span class="number">3</span> <span class="number">22909</span></span><br></pre></td></tr></table></figure><p>string()函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num := <span class="number">108</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T \n&quot;</span>, <span class="type">string</span>(num))</span><br><span class="line"><span class="comment">//输出 string</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s \n&quot;</span>, <span class="type">string</span>(num))</span><br><span class="line"><span class="comment">//输出 l</span></span><br></pre></td></tr></table></figure><h4 id="3-2-字符串连接"><a href="#3-2-字符串连接" class="headerlink" title="3.2 字符串连接"></a>3.2 字符串连接</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str2 := <span class="string">&quot;beijing&quot;</span></span><br><span class="line">fmt.Println(str1 + str2)</span><br><span class="line"><span class="comment">//用+号来连接字符串不高效</span></span><br><span class="line"><span class="comment">//我们使用StringBuilder来高效字符串连接</span></span><br><span class="line"><span class="comment">//创建字节缓冲</span></span><br><span class="line"><span class="keyword">var</span> stringBuilder strings.Builder</span><br><span class="line"></span><br><span class="line"><span class="comment">//把字符串写入缓冲</span></span><br><span class="line">stringBuilder.WriteString(str1)</span><br><span class="line">stringBuilder.WriteString(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将缓冲以字符串形式输出</span></span><br><span class="line">fmt.Println(stringBuilder.String())</span><br></pre></td></tr></table></figure><h3 id="四、strings包相关函数"><a href="#四、strings包相关函数" class="headerlink" title="四、strings包相关函数"></a>四、strings包相关函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找s在字符串str中的索引</span></span><br><span class="line"><span class="comment">//Index(str, s string) int </span></span><br><span class="line">str := <span class="string">&quot;hello beijing&quot;</span></span><br><span class="line">s := <span class="string">&quot;e&quot;</span></span><br><span class="line">fmt.Println(strings.Index(str, s))</span><br><span class="line"><span class="comment">//输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断str是否包含s</span></span><br><span class="line"><span class="comment">//Contains(str, s string) bool</span></span><br><span class="line">fmt.Println(strings.Contains(str, s))</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用字符串str连接s的各个字符串</span></span><br><span class="line"><span class="comment">//Join(s []string, str string) string</span></span><br><span class="line">str := <span class="string">&quot;&lt;--&gt;&quot;</span></span><br><span class="line">s := []<span class="type">string</span>&#123;<span class="string">&quot;O&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;O&quot;</span>&#125;</span><br><span class="line">fmt.Println(strings.Join(s, str))</span><br><span class="line"><span class="comment">//输出 O&lt;--&gt;O&lt;--&gt;O</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//替换字符串str中old字符串为new字符串，n表示替换的次数，小于0全部替换</span></span><br><span class="line"><span class="comment">//Replace(str,old,new string,n int) string</span></span><br><span class="line">str := <span class="string">&quot;hello&quot;</span></span><br><span class="line">old := <span class="string">&quot;e&quot;</span></span><br><span class="line"><span class="built_in">new</span> := <span class="string">&quot;o&quot;</span></span><br><span class="line">fmt.Println(strings.Replace(str, old, <span class="built_in">new</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">//输出 hollo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串str按照s分割，返回切片</span></span><br><span class="line"><span class="comment">//Split(str,s string)[]string</span></span><br><span class="line">str := <span class="string">&quot;php&quot;</span></span><br><span class="line">s := <span class="string">&quot;h&quot;</span></span><br><span class="line">fmt.Println(strings.Split(str, s))</span><br><span class="line"><span class="comment">//输出 [p p]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除头部、尾部指定的字符串</span></span><br><span class="line"><span class="comment">//Trim(s string, cutset string) string</span></span><br><span class="line">str := <span class="string">&quot;linux&quot;</span></span><br><span class="line">s := <span class="string">&quot;l&quot;</span></span><br><span class="line">fmt.Println(strings.Trim(str, s))</span><br><span class="line"><span class="comment">//输出 inux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除空格，返回切片</span></span><br><span class="line"><span class="comment">//Fields(s string) []string</span></span><br><span class="line">s := <span class="string">&quot;ha ha&quot;</span></span><br><span class="line">fmt.Println(strings.Fields(s))</span><br><span class="line"><span class="comment">//输出 [ha ha]</span></span><br></pre></td></tr></table></figure><h3 id="五、strconv包的字符串转换"><a href="#五、strconv包的字符串转换" class="headerlink" title="五、strconv包的字符串转换"></a>五、strconv包的字符串转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整型转字符串</span></span><br><span class="line">num := <span class="number">100</span></span><br><span class="line">str := strconv.Itoa(num)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type: %T value: %#v\n&quot;</span>, str, str)</span><br><span class="line"><span class="comment">//输出 type: string value: &quot;100&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串转整型(字符串中如果夹杂这非数字的字符则可能转换失败)</span></span><br><span class="line">str1 := <span class="string">&quot;110&quot;</span></span><br><span class="line">str2 := <span class="string">&quot;s100&quot;</span></span><br><span class="line">num1, err := strconv.Atoi(str1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v 转换失败！&quot;</span>, str1)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type:%T value:%#v\n&quot;</span>, num1, num1)</span><br><span class="line">&#125;</span><br><span class="line">num2, err := strconv.Atoi(str2)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v 转换失败！&quot;</span>, str2)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type:%T value:%#v\n&quot;</span>, num2, num2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 </span></span><br><span class="line"><span class="keyword">type</span>:<span class="type">int</span> value:<span class="number">110</span></span><br><span class="line">s100 转换失败！</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parse 系列函数</span></span><br><span class="line"><span class="comment">//ParseBool字符串转为布尔型</span></span><br><span class="line"><span class="comment">//只能接受 1、0、t、f、T、F、true、false、True、False、TRUE、FALSE其他都返回错误</span></span><br><span class="line">str1 := <span class="string">&quot;t&quot;</span></span><br><span class="line">boo1, err := strconv.ParseBool(str1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;str1: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(boo1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ParseInt返回字符串表示的整数值(包括正负号)</span></span><br><span class="line">参数<span class="number">1</span>: s <span class="type">string</span> 数字的字符串形式</span><br><span class="line">参数<span class="number">2</span>: base <span class="type">int</span> 取值(<span class="number">2</span><span class="number">-36</span>) </span><br><span class="line">Tips: 如果base为<span class="number">0</span>，根据字符串前置判断，“<span class="number">0</span>x”是<span class="number">16</span>进制，“<span class="number">0</span>”是<span class="number">8</span>进制，否则是<span class="number">10</span>进制</span><br><span class="line">参数<span class="number">3</span>: bitSize <span class="type">int</span> 指定结果必须能无溢出赋值的整数类型，<span class="number">0</span>、<span class="number">8</span>、<span class="number">16</span>、<span class="number">32</span>、<span class="number">64</span> 分别代表</span><br><span class="line"><span class="type">int</span>、<span class="type">int8</span>、<span class="type">int16</span>、<span class="type">int32</span>、<span class="type">int64</span>,限制转化生成<span class="type">int</span>类型的位数,但是返回结果都是<span class="type">int64</span></span><br><span class="line">可参考链接: https:<span class="comment">//studygolang.com/topics/12335</span></span><br><span class="line">str := <span class="string">&quot;-11&quot;</span></span><br><span class="line">num, err := strconv.ParseInt(str, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 -11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ParseUint函数的功能类似于ParseInt函数,只适用于无符号整数</span></span><br><span class="line"><span class="comment">//不再举例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ParseFloat 函数用于将一个表示浮点数的字符串转换为 float 类型</span></span><br><span class="line"><span class="comment">//参数说明：</span></span><br><span class="line"><span class="comment">//如果 s 合乎语法规则，函数会返回最为接近 s 表示值的一个浮点数（使用 IEEE754 规范舍入）。</span></span><br><span class="line"><span class="comment">//bitSize 指定了返回值的类型，32 表示 float32，64 表示 float64；</span></span><br><span class="line"><span class="comment">//返回值 err 是 *NumErr 类型的，如果语法有误 err.Error=ErrSyntax，</span></span><br><span class="line"><span class="comment">//如果返回值超出表示范围，返回值 f 为 ±Inf，err.Error= ErrRange。</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Format 系列函数</span></span><br><span class="line"><span class="comment">//FormatBool函数可以一个bool类型的值转换为对应的字符串类型</span></span><br><span class="line">num := <span class="literal">true</span></span><br><span class="line">str := strconv.FormatBool(num)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T,value:%v\n &quot;</span>, str, str)</span><br><span class="line"><span class="comment">//输出 type:string,value:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//FormatInt函数将整型数据转成指定类型字符串</span></span><br><span class="line"><span class="comment">//Tips:参数 i 必须是 int64 类型</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int64</span> = <span class="number">16</span></span><br><span class="line">str := strconv.FormatInt(num, <span class="number">16</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T,value:%v\n &quot;</span>, str, str)</span><br><span class="line"><span class="comment">//输出 type:string,value:10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//FormatUint函数与FormatInt函数的功能类似，但是参数 i 必须是无符号的 uint64 类型</span></span><br><span class="line"><span class="comment">//不再举例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//FormatFloat函数用于将浮点数转换为字符串类型</span></span><br><span class="line">参数<span class="number">1</span>: bitSize 参数f的来源类型（<span class="number">32</span>表示<span class="type">float32</span>、<span class="number">64</span>表示<span class="type">float64</span>）会据此进行舍入</span><br><span class="line">参数<span class="number">2</span>: fmt 表示格式，可以设置为“f”表示 -ddd.dddd、“b”表示 -ddddp±ddd，指数为二进制、</span><br><span class="line">“e”表示 -d.dddde±dd 十进制指数、“E”表示 -d.ddddE±dd 十进制指数、“g”表示指数很大时用“e”格式，</span><br><span class="line">否则“f”格式、“G”表示指数很大时用“E”格式，否则“f”格式。</span><br><span class="line">参数<span class="number">3</span>: prec 控制精度（排除指数部分）：当参数 fmt 为“f”、“e”、“E”时，它表示小数点后的数字个数</span><br><span class="line">当参数 fmt 为“g”、“G”时，它控制总的数字个数。</span><br><span class="line">如果 prec 为 <span class="number">-1</span>，则代表使用最少数量的、但又必需的数字来表示 f。</span><br><span class="line"><span class="keyword">var</span> num <span class="type">float64</span> = <span class="number">3.1415926</span></span><br><span class="line">str := strconv.FormatFloat(num, <span class="string">&#x27;E&#x27;</span>, <span class="number">-1</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T,value:%v\n &quot;</span>, str, str)</span><br><span class="line"><span class="comment">//输出 type:string,value:3.1415926E+00</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Append 系列函数</span></span><br><span class="line"><span class="comment">// 声明一个slice</span></span><br><span class="line">b10 := []<span class="type">byte</span>(<span class="string">&quot;int (base 10):&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 将转换为10进制的string，追加到slice中</span></span><br><span class="line">b10 = strconv.AppendInt(b10, <span class="number">-42</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Println(<span class="type">string</span>(b10))</span><br><span class="line">b16 := []<span class="type">byte</span>(<span class="string">&quot;int (base 16):&quot;</span>)</span><br><span class="line">b16 = strconv.AppendInt(b16, <span class="number">-42</span>, <span class="number">16</span>)</span><br><span class="line">fmt.Println(<span class="type">string</span>(b16))</span><br><span class="line"><span class="comment">//输出 </span></span><br><span class="line"><span class="type">int</span> (base <span class="number">10</span>):<span class="number">-42</span></span><br><span class="line"><span class="type">int</span> (base <span class="number">16</span>):<span class="number">-2</span>a</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go入门日记-流程控制</title>
      <link href="/posts/fd173a46.html"/>
      <url>/posts/fd173a46.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、条件语句"><a href="#一、条件语句" class="headerlink" title="一、条件语句"></a>一、条件语句</h3><h4 id="1-1-if判断语句："><a href="#1-1-if判断语句：" class="headerlink" title="1.1 if判断语句："></a>1.1 <strong>if</strong>判断语句：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i == <span class="number">3</span>&#123;</span><br><span class="line">    <span class="comment">//如果i等于3输出true</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将初始化条件与判断语句放在一起</span></span><br><span class="line"><span class="keyword">if</span> i := <span class="number">3</span>;i == <span class="number">3</span>&#123;</span><br><span class="line">     <span class="comment">//如果i等于3输出true</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-分支语句"><a href="#1-2-分支语句" class="headerlink" title="1.2 分支语句"></a>1.2 分支语句</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go语言中分支语句中默认书写了break语句</span></span><br><span class="line">num := <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span> num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;111&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;222&quot;</span>)</span><br><span class="line"><span class="keyword">fallthrough</span>            <span class="comment">//fallthrough 不跳出switch</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;333&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;默认&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">333</span></span><br></pre></td></tr></table></figure><h3 id="二、循环语句"><a href="#二、循环语句" class="headerlink" title="二、循环语句"></a>二、循环语句</h3><h4 id="2-1-for循环"><a href="#2-1-for循环" class="headerlink" title="2.1 for循环"></a>2.1 for循环</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统for循环</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for循环简化</span></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> ; ; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类似while循环</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//死循环</span></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for range 遍历数组等</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;key:%d  value:%d\n&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">key:<span class="number">0</span>  value:<span class="number">1</span></span><br><span class="line">key:<span class="number">1</span>  value:<span class="number">2</span></span><br><span class="line">key:<span class="number">2</span>  value:<span class="number">3</span></span><br><span class="line">key:<span class="number">3</span>  value:<span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="2-2-跳出循环"><a href="#2-2-跳出循环" class="headerlink" title="2.2 跳出循环"></a>2.2 跳出循环</h4><p>常用的跳出循环关键字：</p><ul><li><p><code>break</code>用于函数内跳出当前<code>for</code>、<code>switch</code>、<code>select</code>语句的执行</p></li><li><p><code>continue</code>用于跳出<code>for</code>循环的本次迭代。  </p></li><li><p><code>goto</code>可以退出多层循环</p></li><li><pre><code class="go">goto 标签 标签：</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go入门日记-数据类型</title>
      <link href="/posts/71c0dfce.html"/>
      <url>/posts/71c0dfce.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据类型分类"><a href="#一、数据类型分类" class="headerlink" title="一、数据类型分类"></a>一、数据类型分类</h3><p>Go 语言按类别有以下几种数据类型：布尔型、数字型、字符串型、派生型 </p><table><thead><tr><th align="center">整型</th><th align="center">int8、uint等</th><th align="center">数字型</th></tr></thead><tbody><tr><td align="center">浮点型</td><td align="center">float32、float64等</td><td align="center">数字型</td></tr><tr><td align="center">复数</td><td align="center"></td><td align="center">数字型</td></tr><tr><td align="center">布尔型</td><td align="center">bool</td><td align="center">布尔型</td></tr><tr><td align="center">字符串</td><td align="center">string</td><td align="center">字符串型</td></tr><tr><td align="center">数组</td><td align="center"></td><td align="center">派生型</td></tr><tr><td align="center">结构体</td><td align="center">struct</td><td align="center">派生型</td></tr></tbody></table><p>引用类型：即保存的是对程序中一个变量的或状态的间接引用，对其修改将影响所有该引用的拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">指针    *</span><br><span class="line">切片    slice</span><br><span class="line">字典    map</span><br><span class="line">函数    func</span><br><span class="line">管道    chan</span><br><span class="line">接口    interface</span><br></pre></td></tr></table></figure><p>tip：Go语言没有字符型，可以使用byte来保存单个字母</p><h3 id="二-、零值机制"><a href="#二-、零值机制" class="headerlink" title="二 、零值机制"></a>二 、零值机制</h3><p>Go变量初始化会自带默认值，不像其他语言为空，下面列出各种数据类型对应的0值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>     <span class="number">0</span></span><br><span class="line"><span class="type">int8</span>    <span class="number">0</span></span><br><span class="line"><span class="type">int32</span>   <span class="number">0</span></span><br><span class="line"><span class="type">int64</span>   <span class="number">0</span></span><br><span class="line"><span class="type">uint</span>    <span class="number">0x0</span></span><br><span class="line"><span class="type">rune</span>    <span class="number">0</span>           <span class="comment">//rune的实际类型是 int32</span></span><br><span class="line"><span class="type">byte</span>    <span class="number">0x0</span>         <span class="comment">// byte的实际类型是 uint8</span></span><br><span class="line"><span class="type">float32</span> <span class="number">0</span>           <span class="comment">//长度为 4 byte</span></span><br><span class="line"><span class="type">float64</span> <span class="number">0</span>           <span class="comment">//长度为 8 byte</span></span><br><span class="line"><span class="type">bool</span>    <span class="literal">false</span></span><br><span class="line"><span class="type">string</span>  <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go入门日记-标识符与变量</title>
      <link href="/posts/3417d001.html"/>
      <url>/posts/3417d001.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、标识符"><a href="#一、标识符" class="headerlink" title="一、标识符"></a>一、标识符</h2><h3 id="1-1关键字"><a href="#1-1关键字" class="headerlink" title="1.1关键字"></a>1.1关键字</h3><p>目前Go语言有25个关键字</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>        <span class="keyword">default</span>      <span class="function"><span class="keyword">func</span>         <span class="title">interface</span>    <span class="title">select</span></span></span><br><span class="line"><span class="keyword">case</span>         <span class="keyword">defer</span>        <span class="keyword">go</span>           <span class="keyword">map</span>          <span class="keyword">struct</span></span><br><span class="line"><span class="keyword">chan</span>         <span class="keyword">else</span>         <span class="keyword">goto</span>         <span class="keyword">package</span>      <span class="keyword">switch</span></span><br><span class="line"><span class="keyword">const</span>        <span class="keyword">fallthrough</span>  <span class="keyword">if</span>           <span class="keyword">range</span>        <span class="keyword">type</span></span><br><span class="line"><span class="keyword">continue</span>     <span class="keyword">for</span>          <span class="keyword">import</span>       <span class="keyword">return</span>       <span class="keyword">var</span></span><br></pre></td></tr></table></figure><h3 id="1-2保留字"><a href="#1-2保留字" class="headerlink" title="1.2保留字"></a>1.2保留字</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">内建常量：  </span><br><span class="line">       <span class="literal">true</span>        <span class="literal">false</span>       <span class="literal">iota</span>        <span class="literal">nil</span></span><br><span class="line">内建类型：  </span><br><span class="line">       <span class="type">int</span>         <span class="type">int8</span>        <span class="type">int16</span>       <span class="type">int32</span>       <span class="type">int64</span></span><br><span class="line">       <span class="type">uint</span>        <span class="type">uint8</span>       <span class="type">uint16</span>      <span class="type">uint32</span>      <span class="type">uint64</span>      <span class="type">uintptr</span></span><br><span class="line">       <span class="type">float32</span>     <span class="type">float64</span> </span><br><span class="line">       <span class="type">complex128</span>  <span class="type">complex64</span></span><br><span class="line"><span class="type">bool</span>：      </span><br><span class="line">       <span class="type">byte</span>        <span class="type">rune</span>        <span class="type">string</span>     <span class="type">error</span></span><br><span class="line">内建函数：   </span><br><span class="line">       <span class="built_in">make</span>        <span class="built_in">delete</span>      <span class="built_in">complex</span>     <span class="built_in">panic</span>       <span class="built_in">append</span>      <span class="built_in">copy</span>    </span><br><span class="line">       <span class="built_in">close</span>       <span class="built_in">len</span>         <span class="built_in">cap</span>   <span class="built_in">real</span>        <span class="built_in">imag</span>        <span class="built_in">new</span> </span><br><span class="line">       <span class="built_in">recover</span></span><br></pre></td></tr></table></figure><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><h4 id="2-1变量声明"><a href="#2-1变量声明" class="headerlink" title="2.1变量声明"></a>2.1变量声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span>              <span class="comment">//初始化变量默认为0</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>              <span class="comment">//声明并赋值，自动推导变量类型</span></span><br><span class="line">c := <span class="number">2</span>                 <span class="comment">//初始化，自动推导类型(只能在函数内部使用，var定义全局变量)</span></span><br><span class="line"><span class="comment">//Go语言中有定义未使用的变量编译会报错</span></span><br><span class="line"><span class="comment">//大小写变量为不同变量</span></span><br></pre></td></tr></table></figure><h4 id="2-2多变量声明"><a href="#2-2多变量声明" class="headerlink" title="2.2多变量声明"></a>2.2多变量声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c,d <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> c1,d1 <span class="type">int</span> = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> c1,d1 = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">c,d := <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    e <span class="type">int</span></span><br><span class="line">    f <span class="type">byte</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="2-3变量值互换"><a href="#2-3变量值互换" class="headerlink" title="2.3变量值互换"></a>2.3变量值互换</h4><p>在Go语言中两个变量互换的操作十分简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (                <span class="comment">//定义初始化变量</span></span><br><span class="line">m    <span class="type">int</span> = <span class="number">1</span></span><br><span class="line">n    <span class="type">int</span> = <span class="number">2</span></span><br><span class="line">temp <span class="type">int</span> = <span class="number">6</span></span><br><span class="line">)</span><br><span class="line">m,n = n,m           <span class="comment">//将m与n的变量值互换</span></span><br><span class="line">fmt.Println(m, n)   <span class="comment">//2 1</span></span><br></pre></td></tr></table></figure><h4 id="2-4-丢弃变量"><a href="#2-4-丢弃变量" class="headerlink" title="2.4_丢弃变量"></a>2.4_丢弃变量</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//_丢弃变量任何赋予它的值都会被丢弃，该变量不占用命名空间</span></span><br><span class="line">_,d := <span class="number">1</span>,<span class="number">2</span>    <span class="comment">//此时d的值为2，1被丢弃掉</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><a href="https://blog.leonus.cn/" target="_blank" title="Leonus" referrerPolicy="no-referrer" class="link_card"><div class="link_icon"><img src="https://blog.leonus.cn/favicon.ico" class="no-lightbox"></div><div class="link_content"><div class="link_title">Leonus</div><div class="link_desc">进一寸有进一寸的欢喜。</div></div></a><ol><li>你好</li><li>不是</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
